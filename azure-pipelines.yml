# Builds the Betaflight firmware
#
# After building, artifacts are released to a seperate repository.
#
# Azure Pipelines requires the following extensions to be installed:
# - GitHub Tool: https://marketplace.visualstudio.com/items?itemName=marcelo-formentao.github-tools
#
# You'll also need to setup the follwing pipeline variables: 
#     "releaseNotes" - This is used to add the release notes in the windows job in the build stage so they can be published as part of the github release in the release stage
#     "endpoint" - The name of the github endpoint link setup in AzDo - setup when linking AzDo and GitHub
#     "owner" - The owner of the repository to release to e.g. betaflight
#     "repoName" - The name of the repository to release to e.g. betaflight-configurator-nightly


variables:
  owner: betaflight
  repoName: betaflight-pull-requests
  debugReleaseNotes: This is a build of a community provided pull request. It may be unstable and result in corrupted configurations or data loss. **Use only for testing.**

name: $(Build.Repository.Name)_$(Build.SourceBranchName)_$(BuildID)

stages:
- stage: Build
  jobs:
  - job: 'Linux'
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
    - script: make arm_sdk_install
      displayName: 'Install the build toolchain'
    - script: make unified
      displayName: 'Build the Unified Targets'
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Linux release'
      inputs: 
        artifactName: betaflight
        targetPath: '$(System.DefaultWorkingDirectory)/obj'

- stage: Release
  jobs:
  - job: Release

    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        targetPath: '$(Pipeline.Workspace)'
    - task: GitHubReleasePublish@1
      inputs:
        githubEndpoint: '$(endpoint)'
        manuallySetRepository: true
        githubOwner: '$(owner)'
        githubRepositoryName: '$(repoName)'
        githubReleaseNotes: |+
          $(releaseNotes)

          Source fork:
          $(Build.Repository.Name)

          Source branch:
          $(System.PullRequest.SourceBranch)

          Build.Repository.Name
          $(Build.Repository.Name)
          Build.Repository.ID
          $(Build.Repository.ID)
          Build.Repository.Uri
          $(Build.Repository.Uri)
          Build.RequestedFor
          $(Build.RequestedFor)
          Build.QueuedBy
          $(Build.QueuedBy)

          Commit message:
          $(Build.SourceVersionMessage)
        githubReleaseDraft: false
        githubReleasePrerelease: false
        githubIgnoreAssets: false
        githubReleaseAsset: |
          $(Pipeline.Workspace)/betaflight/**
        githubReuseRelease: true
        githubReuseDraftOnly: true
        githubSkipDuplicatedAssets: false
        githubEditRelease: false
        githubDeleteEmptyTag: false
